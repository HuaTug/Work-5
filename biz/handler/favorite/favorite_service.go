// Code generated by hertz generator.

package favorite

import (
	favorite2 "Hertz_refactored/biz/dal/db/favorite"
	"Hertz_refactored/biz/model/favorite"
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/sirupsen/logrus"
)

const (
	add = int64(1)
	sub = int64(-1)
)

// FavoriteService .
// @router /like/action [POST]
func FavoriteService(ctx context.Context, c *app.RequestContext) {
	var err error
	var req favorite.FavoriteRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}
	userId, _ := c.Get("user_id")
	var id int64
	if v, ok := userId.(float64); ok {
		id = int64(v)
	} else {
		return
	}
	resp := new(favorite.FavoriteResponse)
	if req.ActionType == 1 {
		if err := favorite2.Favorite(req, id); err != nil {
			logrus.Info(err)
		}
		resp.Code = consts.StatusOK
		resp.Msg = "点赞成功"
		c.JSON(consts.StatusOK, resp)
	} else {
		if err := favorite2.UnFavorite(req, userId); err != nil {
			logrus.Info(err)
		}
		resp.Code = consts.StatusOK
		resp.Msg = "取消点赞成功"
		c.JSON(consts.StatusOK, resp)
	}

}

// ListFavorite .
// @router /like/list [GET]
func ListFavorite(ctx context.Context, c *app.RequestContext) {
	var err error
	var req favorite.ListFavoriteRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	userID, _ := c.Get("user_id")

	var fav favorite.ListFavoriteResponse
	if fav, err = favorite2.List(userID); err != nil {
		logrus.Info(err)
	}
	resp := new(favorite.ListFavoriteResponse)
	resp.Code = consts.StatusOK
	resp.Msg = "成功展示列表"
	c.JSON(consts.StatusOK, fav)
}
