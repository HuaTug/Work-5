// Code generated by hertz generator.

package favorite

import (
	"Hertz_refactored/biz/model/favorite"
	"Hertz_refactored/biz/pkg/utils"
	favorite_service "Hertz_refactored/biz/service/favorite"
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/sirupsen/logrus"
)

const (
	add = int64(1)
	sub = int64(-1)
)

// FavoriteService .
// @router /like/action [POST]
func FavoriteService(ctx context.Context, c *app.RequestContext) {
	var err error
	var req favorite.FavoriteRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}
	v, _ := c.Get("user_id")
	userId := utils.Transfer(v)
	resp := new(favorite.FavoriteResponse)
	s := favorite_service.NewFavoriteService(ctx)
	if req.ActionType == 1 {
		if err := s.Favorite(req, userId); err != nil {
			logrus.Info(err)
		}
		resp.Code = consts.StatusOK
		resp.Msg = "点赞成功"
		c.JSON(consts.StatusOK, resp)
		return
	} else {
		if err := s.UnFavorite(req, userId); err != nil {
			logrus.Info(err)
		}
		resp.Code = consts.StatusOK
		resp.Msg = "取消点赞成功"
		c.JSON(consts.StatusOK, resp)
		return
	}
}

// ListFavorite .
// @router /like/list [GET]
func ListFavorite(ctx context.Context, c *app.RequestContext) {
	var err error
	var req favorite.ListFavoriteRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	v, _ := c.Get("user_id")
	userId := utils.Transfer(v)
	s := favorite_service.NewFavoriteService(ctx)
	var fav favorite.ListFavoriteResponse
	resp := new(favorite.ListFavoriteResponse)
	if fav, err = s.List(userId); err != nil {
		logrus.Info(err)
		resp.Code = consts.StatusBadRequest
		resp.Msg = "展示列表失败"
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	resp.Code = consts.StatusOK
	resp.Msg = "成功展示列表"
	c.JSON(consts.StatusOK, fav)
	return
}
