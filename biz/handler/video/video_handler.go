// Code generated by hertz generator.

package video

import (
	"Hertz_refactored/biz/dal/cache"
	"Hertz_refactored/biz/pkg/logging"
	video_service "Hertz_refactored/biz/service/video"
	"context"
	"github.com/sirupsen/logrus"

	video "Hertz_refactored/biz/model/video"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// FeedService .
// @router /v1/video/ [GET]
func FeedService(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.FeedServiceRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	var videos []*video.Video
	if videos, err = video_service.NewVideoService(ctx).FeedList(req); err != nil {
		logrus.Info(err)
	}
	c.JSON(consts.StatusOK, video.FeedServiceResponse{
		Code:      consts.StatusOK,
		Msg:       "展示视频流列表",
		VideoList: videos,
	})

}

// VideoFeedList .
// @router /v1/video/list [GET]
func VideoFeedList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoFeedListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	var videos []*video.Video
	var count int64
	if videos, count, err = video_service.NewVideoService(ctx).VideoList(req); err != nil {
		logrus.Info(err)
	}
	c.JSON(consts.StatusOK, video.VideoFeedListResponse{
		Code:      consts.StatusOK,
		Msg:       "展示上传视频列表",
		VideoList: videos,
		Count:     count,
	})
}

// VideoSearch .
// @router /v1/video/search [POST]
func VideoSearch(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoSearchRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	var videos []*video.Video
	var count int64
	if videos, count, err = video_service.NewVideoService(ctx).VideoSearch(req); err != nil {
		logrus.Info(err)
	}
	c.JSON(consts.StatusOK, video.VideoSearchResponse{
		Code:        consts.StatusOK,
		Msg:         "视频搜索结果",
		VideoSearch: videos,
		Count:       count,
	})
}

// VideoPopular .
// @router /v1/video/popular [GET]
func VideoPopular(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoPopularRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	//resp := new(video.VideoPopularResponse)
	//ToDo :排行的显示功能有问题 可以在redis内直接查看
	res, err := cache.RangeList("Rank")
	if err != nil {
		logging.Error(err)
		return
	}
	c.JSON(consts.StatusOK, res)
}
