// Code generated by hertz generator.

package relation

import (
	"Hertz_refactored/biz/model/relation"
	"Hertz_refactored/biz/pkg/utils"
	relation_service "Hertz_refactored/biz/service/relation"

	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/sirupsen/logrus"
)

// RelationService .
// @router /v1/relation/action [POST]
func RelationService(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.RelationServiceRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, err.Error())
		return
	}
	v, _ := c.Get("user_id")
	userId := utils.Transfer(v)
	if err := relation_service.NewRelationService(ctx).Following(req, userId); err != nil {
		logrus.Info(err)
		c.JSON(consts.StatusBadRequest, "关注出错")
		return
	}
	resp := new(relation.RelationServiceResponse)
	resp.Code = consts.StatusOK
	resp.Msg = "成功关注"
	c.JSON(consts.StatusOK, resp)
}

// RelationServicePage .
// @router /v1/relation/list [GET]
func RelationServicePage(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.RelationServicePageRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, err.Error())
		return
	}
	v, _ := c.Get("user_id")
	userId := utils.Transfer(v)

	c.JSON(consts.StatusOK, relation_service.NewRelationService(ctx).FollowList(req, userId))
	return
}
