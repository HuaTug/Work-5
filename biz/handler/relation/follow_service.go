// Code generated by hertz generator.

package relation

import (
	relation2 "Hertz_refactored/biz/dal/db/relation"
	relation "Hertz_refactored/biz/model/relation"
	"context"
	"fmt"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/sirupsen/logrus"
)

// RelationService .
// @router /v1/relation/action [POST]
func RelationService(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.RelationServiceRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	userId, _ := c.Get("user_id")
	var id int64
	fmt.Println(userId)
	if v, ok := userId.(float64); ok {
		id = int64(v)
	} else {
		return
	}
	if err := relation2.Following(req, id); err != nil {
		logrus.Info(err)
		c.JSON(consts.StatusBadRequest, "关注出错")
		return
	}
	resp := new(relation.RelationServiceResponse)
	resp.Code = consts.StatusOK
	resp.Msg = "成功关注"
	c.JSON(consts.StatusOK, resp)
}

// RelationServicePage .
// @router /v1/relation/list [GET]
func RelationServicePage(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.RelationServicePageRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	userId, _ := c.Get("user_id")
	c.JSON(consts.StatusOK, relation2.FollowList(req, userId))
	return
}
