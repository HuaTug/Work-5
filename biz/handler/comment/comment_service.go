// Code generated by hertz generator.

package comment

import (
	comment2 "Hertz_refactored/biz/dal/db/comment"
	"Hertz_refactored/biz/dal/redis"
	"Hertz_refactored/biz/model/comment"
	"Hertz_refactored/biz/pkg/errno"
	"context"
	"encoding/json"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/sirupsen/logrus"
	"strconv"
	"time"
)

// CreateComment .
// @router /v1/comment/publish [POST]
func CreateComment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req comment.CreateCommentRequest
	err = c.BindAndValidate(&req)
	userId, _ := c.Get("user_id")
	resp := new(comment.CreateCommentResponse)
	if uid, ok := userId.(float64); ok {
		if err != nil {
			c.String(consts.StatusBadRequest, err.Error())
			return
		}
		comments := &comment.Comment{
			VideoId: req.VideoId,
			Comment: req.Comment,
			UserId:  int64(uid),
			Time:    time.Now().Format(time.DateTime),
		}
		if err := comment2.CreateComment(comments); err != nil {
			logrus.Info(err)
			return
		}
		resp.Code = consts.StatusOK
		resp.Msg = "创建评论成功"
		c.JSON(consts.StatusOK, resp)
		return
	}
	resp.Code = consts.StatusBadRequest
	resp.Msg = "创建评论失败"
	c.JSON(consts.StatusBadRequest, resp)
	return
}

// ListComment .
// @router /v1/comment/list [GET]
func ListComment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req comment.ListCommentRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	var comments []*comment.Comment
	var total int64
	comments, _ = CacheGetListComment(req.VideoId)
	comments, total, err = comment2.ListComment(req)
	if err != nil {
		logrus.Info(err)
		c.JSON(consts.StatusBadRequest, "展示评论列表失败")
		return
	}
	CacheSetAllComment(req.VideoId, comments)
	c.JSON(consts.StatusOK, &comment.ListCommentResponse{
		Code:     errno.SuccessCode,
		Msg:      "展示评论信息",
		Comments: comments,
		Total:    total,
	})
}

// DeleteComment .
// @router /v1/comment/delete [DELETE]
func DeleteComment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req comment.CommentDeleteRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	if err := comment2.DeleteComment(req); err != nil {
		panic(err)
	}
	resp := new(comment.CommentDeleteResponse)
	resp.Code = consts.StatusOK
	resp.Msg = "成功删除一条记录"
	c.JSON(consts.StatusOK, resp)
}

// Redis缓存
func CacheSetAllComment(videoId int64, c []*comment.Comment) {
	vid := strconv.FormatInt(videoId, 10)
	err := redis.CacheHSet("comment:"+vid, vid, c)
	if err != nil {
		logrus.Info("Set Cache error: ", err)
	}
}
func CacheGetListComment(videoId int64) ([]*comment.Comment, error) {
	key := strconv.FormatInt(videoId, 10)
	data, err := redis.CacheHGet("comment:"+key, key)
	var comments []*comment.Comment
	if err != nil {
		return comments, err
	}
	err = json.Unmarshal(data, &comments)
	return comments, nil
}
